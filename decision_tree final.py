# -*- coding: utf-8 -*-
"""decision tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OQ-6F3Qyf1mHzQhElvhYoWr6ih_HR9Gq
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset = pd.read_csv("/content/vgsales.csv")
dataset.head()

dataset.isnull().sum()
X = dataset['Year'].values
y = dataset['Global_Sales'].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.05)

# Fitting Decision Tree Regression to the dataset
from sklearn.tree import DecisionTreeRegressor
regressor = DecisionTreeRegressor()
regressor.fit(X_train.reshape(-1,1), y_train.reshape(-1,1))

y_pred = regressor.predict(X_test.reshape(-1,1))

df = pd.DataFrame({'Real Values':y_test.reshape(-1), 'Predicted Values':y_pred.reshape(-1)})
df

# Visualising the Decision Tree Regression Results 
X_grid = np.arange(min(X), max(X), 0.01)
X_grid = X_grid.reshape((len(X_grid), 1))
plt.scatter(X_test, y_test, color = 'red')
plt.scatter(X_test, y_pred, color = 'green')
plt.title('Decision Tree Regression')
plt.xlabel('year')
plt.ylabel('Global_Sales')
plt.show()

plt.plot(X_grid, regressor.predict(X_grid), color = 'black')
plt.title('Decision Tree Regression')
plt.xlabel('Year')
plt.ylabel('Global_Sales')
plt.show()

# arange for creating a range of values 
# from min value of X to max value of X 
# with a difference of 0.01 between two
# consecutive values
X_grid = np.arange(min(X), max(X), 0.01)
  
# reshape for reshaping the data into 
# a len(X_grid)*1 array, i.e. to make
# a column out of the X_grid values
X_grid = X_grid.reshape((len(X_grid), 1)) 
  
# scatter plot for original data
plt.scatter(X, y, color = 'red')
  
# plot predicted data
plt.plot(X_grid, regressor.predict(X_grid), color = 'blue') 
  
# specify title
plt.title('Decision Tree Regression') 
  
# specify X axis label
plt.xlabel('year')
  
# specify Y axis label
plt.ylabel('Global_Sales')
  
# show the plot
plt.show()

# import export_graphviz
from sklearn.tree import export_graphviz 
  
# export the decision tree to a tree.dot file
# for visualizing the plot easily anywhere
export_graphviz(regressor, out_file ='decisiontree.dot',
               feature_names =['year'])

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=2529)
X_train.shape,X_test.shape,y_train.shape,y_test.shape

X_test=(X_test.reshape(-1,1))
X_train=(X_train.reshape(-1,1))
y_train=(y_train.reshape(-1,1))
y_test=(y_test.reshape(-1,1))
from sklearn import linear_model
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error,mean_absolute_error
reg_all=DecisionTreeRegressor()
reg_all.fit(X_train,y_train)
y_pred=reg_all.predict(X_test)
Rsquare=reg_all.score(X_test,y_test)
print("Rsquare: %f" %(Rsquare))
#print("Intercept: %f" %(reg_all.intercept_))
mse=mean_squared_error(y_test,y_pred)
print("mse: %f" %(mse))
mae = mean_absolute_error(y_test,y_pred)
print("mae: %f" %(mae))