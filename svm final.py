# -*- coding: utf-8 -*-
"""svm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K5HMFQ1_EBgOuNldspXm8-Y5QGRxdmOr
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset = pd.read_csv('/content/vgsales.csv')
# our dataset in this implementation is small, and thus we can print it all instead of viewing only the end
print(dataset)

# split the data into featutes and target variable seperately
X_l = dataset.iloc[:, -7].values # features set
y_p = dataset.iloc[:, -1].values # set of study variable

print(X_l)
print(y_p)

y_p = y_p.reshape(-1,1)
print(y_p)
X_p=X_l.reshape(-1,1)
print(X_p)

from sklearn.preprocessing import StandardScaler
StdS_X = StandardScaler()
StdS_y = StandardScaler()
X_p = StdS_X.fit_transform(X_p)
y_p = StdS_y.fit_transform(y_p)

print("Scaled X_p:")
print(X_p)
print("Scaled y_p:")
print(y_p)

plt.scatter(X_p, y_p, color = 'blue') # plotting the training set
plt.title('Scatter Plot') # adding a tittle to our plot
plt.xlabel('Year') # adds a label to the x-axis
plt.ylabel('Global_Sales') # adds a label to the y-axis
plt.show() # prints

# import the model
from sklearn.svm import SVR
# create the model object
regressor = SVR(kernel = 'rbf')
# fit the model on the data
regressor.fit(X_p, y_p)

A=regressor.predict(StdS_X.transform([[6.5]]))
print(A)
A = A.reshape(-1,1)

# Taking the inverse of the scaled value
A_pred = StdS_y.inverse_transform(A)
print(A_pred)

B_pred = StdS_y.inverse_transform(regressor.predict(StdS_X.transform([[6.5]])).reshape(-1,1))
print(B_pred)

# inverse the transformation to go back to the initial scale
plt.scatter(StdS_X.inverse_transform(X_p), StdS_y.inverse_transform(y_p), color = 'blue')
plt.scatter(StdS_X.inverse_transform(X_p), StdS_y.inverse_transform(regressor.predict(X_p).reshape(-1,1)), color = 'red')
# add the title to the plot
plt.title('Support Vector Regression Model')
# label x axis
plt.xlabel('Year')
# label y axis
plt.ylabel('Global Sales')
# print the plot
plt.show()

from sklearn.model_selection import train_test_split
X_p_train,X_p_test,y_p_train,y_p_test=train_test_split(X_p,y_p,test_size=0.3,random_state=2529)
X_p_train.shape,X_p_test.shape,y_p_train.shape,y_p_test.shape

from sklearn import linear_model
from sklearn.metrics import mean_squared_error,mean_absolute_error
reg_all=SVR()
reg_all.fit(X_p_train,y_p_train)
y_p_pred=reg_all.predict(X_p_test)
Rsquare=reg_all.score(X_p_test,y_p_test)
print("Rsquare: %f" %(Rsquare))
print("Intercept: %f" %(reg_all.intercept_))
mse=mean_squared_error(y_p_test,y_p_pred)
print("mse: %f" %(mse))
mae = mean_absolute_error(y_p_test,y_p_pred)
print("mae: %f" %(mae))